
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006144  08006144  00007144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  0000820c  2**0
                  CONTENTS
  4 .ARM          00000008  08006184  08006184  00007184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006190  08006190  00007190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08006194  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  2000020c  080063a0  0000820c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  080063a0  00008bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154d2  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002898  00000000  00000000  0001d70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d78  00000000  00000000  000210d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  00021e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014641  00000000  00000000  00048221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc11a  00000000  00000000  0005c862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015897c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  001589c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0015d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800612c 	.word	0x0800612c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	0800612c 	.word	0x0800612c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000228 	.word	0x20000228

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000228 	.word	0x20000228

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 fc79 	bl	8004e68 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fa5f 	bl	8003a6c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fc01 	bl	8004dbc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fc18 	bl	8004df4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fedf 	bl	8004390 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f004 f807 	bl	8004604 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fdcb 	bl	80031a8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fea4 	bl	8003368 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000228 	.word	0x20000228
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f003 ff54 	bl	8004604 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 fc64 	bl	8006110 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 fc00 	bl	8006110 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000228 	.word	0x20000228

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000228 	.word	0x20000228

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 fb25 	bl	8006110 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 fcd8 	bl	8004504 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000228 	.word	0x20000228

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fc13 	bl	800139e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f836 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f000 f97e 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b80:	f000 f94a 	bl	8000e18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b84:	f000 f8fa 	bl	8000d7c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b88:	f000 f8c8 	bl	8000d1c <MX_TIM16_Init>
  MX_TIM2_Init();
 8000b8c:	f000 f878 	bl	8000c80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <main+0x68>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <main+0x6c>)
 8000b94:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <main+0x68>)
 8000b98:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <main+0x70>)
 8000b9a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <main+0x68>)
 8000b9e:	2215      	movs	r2, #21
 8000ba0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <main+0x68>)
 8000ba4:	22c8      	movs	r2, #200	@ 0xc8
 8000ba6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000ba8:	490e      	ldr	r1, [pc, #56]	@ (8000be4 <main+0x74>)
 8000baa:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <main+0x68>)
 8000bac:	f7ff fcec 	bl	8000588 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000bb0:	f7ff fd76 	bl	80006a0 <Modbus_Protocal_Worker>

	  registerFrame[0x00].U16=22881;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <main+0x74>)
 8000bb6:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000bba:	801a      	strh	r2, [r3, #0]
	  set_shelves();
 8000bbc:	f000 f9cc 	bl	8000f58 <set_shelves>
	  set_goalpoint();
 8000bc0:	f000 f9de 	bl	8000f80 <set_goalpoint>
	  run_pointmode();
 8000bc4:	f000 f9e4 	bl	8000f90 <run_pointmode>
	  set_home();
 8000bc8:	f000 f9f6 	bl	8000fb8 <set_home>
	  pick_place();
 8000bcc:	f000 fa08 	bl	8000fe0 <pick_place>
	  run_jogmode();
 8000bd0:	f000 fa18 	bl	8001004 <run_jogmode>
	  Modbus_Protocal_Worker();
 8000bd4:	bf00      	nop
 8000bd6:	e7eb      	b.n	8000bb0 <main+0x40>
 8000bd8:	20000550 	.word	0x20000550
 8000bdc:	200003c4 	.word	0x200003c4
 8000be0:	200002f8 	.word	0x200002f8
 8000be4:	20000a28 	.word	0x20000a28

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	@ 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0318 	add.w	r3, r7, #24
 8000bf2:	2238      	movs	r2, #56	@ 0x38
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 fa5e 	bl	80060b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f001 fa38 	bl	8002080 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1a:	2340      	movs	r3, #64	@ 0x40
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c26:	2304      	movs	r3, #4
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c2a:	2355      	movs	r3, #85	@ 0x55
 8000c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fad2 	bl	80021e8 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c4a:	f000 f9ef 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2303      	movs	r3, #3
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2104      	movs	r1, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fdd0 	bl	800280c <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c72:	f000 f9db 	bl	800102c <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	@ 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000ca8:	22a9      	movs	r2, #169	@ 0xa9
 8000caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000cb4:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <MX_TIM2_Init+0x98>)
 8000cb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000cc6:	f002 fa0b 	bl	80030e0 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f000 f9ac 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000ce2:	f002 fd49 	bl	8003778 <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cec:	f000 f99e 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_TIM2_Init+0x94>)
 8000cfe:	f003 fa01 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 f990 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000022c 	.word	0x2000022c
 8000d18:	00030d40 	.word	0x00030d40

08000d1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d20:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <MX_TIM16_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d28:	22a9      	movs	r2, #169	@ 0xa9
 8000d2a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d34:	f240 4279 	movw	r2, #1145	@ 0x479
 8000d38:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d4c:	4809      	ldr	r0, [pc, #36]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d4e:	f002 f9c7 	bl	80030e0 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d58:	f000 f968 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_TIM16_Init+0x58>)
 8000d60:	f002 fa9a 	bl	8003298 <HAL_TIM_OnePulse_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f95f 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002f8 	.word	0x200002f8
 8000d78:	40014400 	.word	0x40014400

08000d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d80:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000d82:	4a24      	ldr	r2, [pc, #144]	@ (8000e14 <MX_USART2_UART_Init+0x98>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000d86:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000d88:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000d90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d94:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc8:	4811      	ldr	r0, [pc, #68]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000dca:	f003 fa81 	bl	80042d0 <HAL_UART_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000dd4:	f000 f92a 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000ddc:	f005 f8a1 	bl	8005f22 <HAL_UARTEx_SetTxFifoThreshold>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f921 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000dee:	f005 f8d6 	bl	8005f9e <HAL_UARTEx_SetRxFifoThreshold>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000df8:	f000 f918 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_USART2_UART_Init+0x94>)
 8000dfe:	f005 f857 	bl	8005eb0 <HAL_UARTEx_DisableFifoMode>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000e08:	f000 f910 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200003c4 	.word	0x200003c4
 8000e14:	40004400 	.word	0x40004400

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <MX_DMA_Init+0x60>)
 8000e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e22:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <MX_DMA_Init+0x60>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_DMA_Init+0x60>)
 8000e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_DMA_Init+0x60>)
 8000e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e78 <MX_DMA_Init+0x60>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <MX_DMA_Init+0x60>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	200b      	movs	r0, #11
 8000e54:	f000 fbef 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e58:	200b      	movs	r0, #11
 8000e5a:	f000 fc06 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200c      	movs	r0, #12
 8000e64:	f000 fbe7 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e68:	200c      	movs	r0, #12
 8000e6a:	f000 fbfe 	bl	800166a <HAL_NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b2f      	ldr	r3, [pc, #188]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a2e      	ldr	r2, [pc, #184]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a28      	ldr	r2, [pc, #160]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <MX_GPIO_Init+0xd4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efa:	f001 f885 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	480f      	ldr	r0, [pc, #60]	@ (8000f54 <MX_GPIO_Init+0xd8>)
 8000f16:	f000 fef5 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f000 fee6 	bl	8001d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2028      	movs	r0, #40	@ 0x28
 8000f3e:	f000 fb7a 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f42:	2028      	movs	r0, #40	@ 0x28
 8000f44:	f000 fb91 	bl	800166a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	@ 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48000800 	.word	0x48000800

08000f58 <set_shelves>:

/* USER CODE BEGIN 4 */
void set_shelves(){
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16==0b0001){
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <set_shelves+0x24>)
 8000f5e:	885b      	ldrh	r3, [r3, #2]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d105      	bne.n	8000f70 <set_shelves+0x18>
		registerFrame[0x10].U16=0b0001; //z-axis Moving Status
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <set_shelves+0x24>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	841a      	strh	r2, [r3, #32]
		registerFrame[0x01].U16=0b0000;
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <set_shelves+0x24>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	805a      	strh	r2, [r3, #2]
	}
//	if() บันทึ�?ค่า shelves ทั้ง5ชั้นสำเร็จ
//	registerFrame[0x10].U16=0b0000;
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000a28 	.word	0x20000a28

08000f80 <set_goalpoint>:
void set_goalpoint(){
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	//goal point z
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <run_pointmode>:
void run_pointmode(){
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16==0b1000){
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <run_pointmode+0x24>)
 8000f96:	885b      	ldrh	r3, [r3, #2]
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d105      	bne.n	8000fa8 <run_pointmode+0x18>
		registerFrame[0x01].U16=0b0000;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <run_pointmode+0x24>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b00010000; //Go point
 8000fa2:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <run_pointmode+0x24>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	841a      	strh	r2, [r3, #32]
//	if()หุ่นเคลื่อนที่ไปยัง�?�?น Z เสร็จสิ้น
//		registerFrame[0x10].U16=0b0000; //เสร็จ jogging
	}
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000a28 	.word	0x20000a28

08000fb8 <set_home>:
void set_home(){
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16==0b0010){
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <set_home+0x24>)
 8000fbe:	885b      	ldrh	r3, [r3, #2]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d105      	bne.n	8000fd0 <set_home+0x18>

		registerFrame[0x01].U16=0b0000;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <set_home+0x24>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16=0b0010;
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <set_home+0x24>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	841a      	strh	r2, [r3, #32]
	}
//	if() เข้า Homing เสร็จสิ้น
//	registerFrame[0x10].U16=0b0000;
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000a28 	.word	0x20000a28

08000fe0 <pick_place>:
void pick_place(){
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	registerFrame[0x21].U16=0; //ใส่ค่า set pick
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <pick_place+0x20>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	registerFrame[0x22].U16=0; //ใส่ค่า set place
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <pick_place+0x20>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000a28 	.word	0x20000a28

08001004 <run_jogmode>:
void run_jogmode(){
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16==0b0100){
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <run_jogmode+0x24>)
 800100a:	885b      	ldrh	r3, [r3, #2]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d105      	bne.n	800101c <run_jogmode+0x18>
		registerFrame[0x10].U16=0b0100;//Go pick
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <run_jogmode+0x24>)
 8001012:	2204      	movs	r2, #4
 8001014:	841a      	strh	r2, [r3, #32]
		registerFrame[0x10].U16=0b1000;//Go place
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <run_jogmode+0x24>)
 8001018:	2208      	movs	r2, #8
 800101a:	841a      	strh	r2, [r3, #32]
	}
//	if() วางเสร็จ
//	registerFrame[0x10].U16=0b0000;
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000a28 	.word	0x20000a28

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6613      	str	r3, [r2, #96]	@ 0x60
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001060:	6593      	str	r3, [r2, #88]	@ 0x58
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800106e:	f001 f8ab 	bl	80021c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001090:	d10c      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6593      	str	r3, [r2, #88]	@ 0x58
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010aa:	e018      	b.n	80010de <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_TIM_Base_MspInit+0x6c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d113      	bne.n	80010de <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2019      	movs	r0, #25
 80010d4:	f000 faaf 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010d8:	2019      	movs	r0, #25
 80010da:	f000 fac6 	bl	800166a <HAL_NVIC_EnableIRQ>
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40014400 	.word	0x40014400

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09e      	sub	sp, #120	@ 0x78
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2254      	movs	r2, #84	@ 0x54
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f004 ffd1 	bl	80060b8 <memset>
  if(huart->Instance==USART2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <HAL_UART_MspInit+0x160>)
 800111c:	4293      	cmp	r3, r2
 800111e:	f040 8092 	bne.w	8001246 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fd88 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800113a:	f7ff ff77 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113e:	4b45      	ldr	r3, [pc, #276]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	4a44      	ldr	r2, [pc, #272]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6593      	str	r3, [r2, #88]	@ 0x58
 800114a:	4b42      	ldr	r3, [pc, #264]	@ (8001254 <HAL_UART_MspInit+0x164>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_UART_MspInit+0x164>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <HAL_UART_MspInit+0x164>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116e:	230c      	movs	r3, #12
 8001170:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800118c:	f000 fdba 	bl	8001d04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001190:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_UART_MspInit+0x168>)
 8001192:	4a32      	ldr	r2, [pc, #200]	@ (800125c <HAL_UART_MspInit+0x16c>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001196:	4b30      	ldr	r3, [pc, #192]	@ (8001258 <HAL_UART_MspInit+0x168>)
 8001198:	221b      	movs	r2, #27
 800119a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119c:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <HAL_UART_MspInit+0x168>)
 800119e:	2210      	movs	r2, #16
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011ba:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c0:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011c6:	4824      	ldr	r0, [pc, #144]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011c8:	f000 fa6a 	bl	80016a0 <HAL_DMA_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80011d2:	f7ff ff2b 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_UART_MspInit+0x168>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <HAL_UART_MspInit+0x174>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011ea:	221a      	movs	r2, #26
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0x170>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_UART_MspInit+0x170>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001218:	4811      	ldr	r0, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0x170>)
 800121a:	f000 fa41 	bl	80016a0 <HAL_DMA_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001224:	f7ff ff02 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <HAL_UART_MspInit+0x170>)
 800122c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_UART_MspInit+0x170>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2026      	movs	r0, #38	@ 0x26
 800123c:	f000 f9fb 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2026      	movs	r0, #38	@ 0x26
 8001242:	f000 fa12 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3778      	adds	r7, #120	@ 0x78
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	40021000 	.word	0x40021000
 8001258:	20000490 	.word	0x20000490
 800125c:	40020008 	.word	0x40020008
 8001260:	200004f0 	.word	0x200004f0
 8001264:	4002001c 	.word	0x4002001c

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f8c1 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Channel1_IRQHandler+0x10>)
 80012ce:	f000 fbca 	bl	8001a66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000490 	.word	0x20000490

080012dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA1_Channel2_IRQHandler+0x10>)
 80012e2:	f000 fbc0 	bl	8001a66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200004f0 	.word	0x200004f0

080012f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012f6:	f002 f8c5 	bl	8003484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200002f8 	.word	0x200002f8

08001304 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <USART2_IRQHandler+0x10>)
 800130a:	f003 f9c7 	bl	800469c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200003c4 	.word	0x200003c4

08001318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800131c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001320:	f000 fe8a 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001350:	f7ff ffea 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f004 fea5 	bl	80060c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137e:	f7ff fbf7 	bl	8000b70 <main>

08001382 <LoopForever>:

LoopForever:
    b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001390:	08006194 	.word	0x08006194
  ldr r2, =_sbss
 8001394:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001398:	20000bbc 	.word	0x20000bbc

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>

0800139e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f939 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f80e 	bl	80013d0 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e001      	b.n	80013c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c0:	f7ff fe3a 	bl	8001038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c4:	79fb      	ldrb	r3, [r7, #7]

}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_InitTick+0x68>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d022      	beq.n	800142a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_InitTick+0x6c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <HAL_InitTick+0x68>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f944 	bl	8001686 <HAL_SYSTICK_Config>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	d809      	bhi.n	800141e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140a:	2200      	movs	r2, #0
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	f000 f910 	bl	8001636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <HAL_InitTick+0x70>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e007      	b.n	800142e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e004      	b.n	800142e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e001      	b.n	800142e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000208 	.word	0x20000208
 800143c:	20000200 	.word	0x20000200
 8001440:	20000204 	.word	0x20000204

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_IncTick+0x1c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_IncTick+0x20>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <HAL_IncTick+0x1c>)
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20000bb8 	.word	0x20000bb8
 8001464:	20000208 	.word	0x20000208

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000bb8 	.word	0x20000bb8

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	@ (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	@ (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	@ (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	@ 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff40 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff33 	bl	80014e4 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa4 	bl	80015dc <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e08d      	b.n	80017ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <HAL_DMA_Init+0x138>)
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d80f      	bhi.n	80016de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b45      	ldr	r3, [pc, #276]	@ (80017dc <HAL_DMA_Init+0x13c>)
 80016c6:	4413      	add	r3, r2
 80016c8:	4a45      	ldr	r2, [pc, #276]	@ (80017e0 <HAL_DMA_Init+0x140>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	009a      	lsls	r2, r3, #2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a42      	ldr	r2, [pc, #264]	@ (80017e4 <HAL_DMA_Init+0x144>)
 80016da:	641a      	str	r2, [r3, #64]	@ 0x40
 80016dc:	e00e      	b.n	80016fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b40      	ldr	r3, [pc, #256]	@ (80017e8 <HAL_DMA_Init+0x148>)
 80016e6:	4413      	add	r3, r2
 80016e8:	4a3d      	ldr	r2, [pc, #244]	@ (80017e0 <HAL_DMA_Init+0x140>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	009a      	lsls	r2, r3, #2
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a3c      	ldr	r2, [pc, #240]	@ (80017ec <HAL_DMA_Init+0x14c>)
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001716:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 fa76 	bl	8001c40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800175c:	d102      	bne.n	8001764 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001778:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d010      	beq.n	80017a4 <HAL_DMA_Init+0x104>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b04      	cmp	r3, #4
 8001788:	d80c      	bhi.n	80017a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fa96 	bl	8001cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	e008      	b.n	80017b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020407 	.word	0x40020407
 80017dc:	bffdfff8 	.word	0xbffdfff8
 80017e0:	cccccccd 	.word	0xcccccccd
 80017e4:	40020000 	.word	0x40020000
 80017e8:	bffdfbf8 	.word	0xbffdfbf8
 80017ec:	40020400 	.word	0x40020400

080017f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_DMA_Start_IT+0x20>
 800180c:	2302      	movs	r3, #2
 800180e:	e066      	b.n	80018de <HAL_DMA_Start_IT+0xee>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d155      	bne.n	80018d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f9bb 	bl	8001bc4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 020e 	orr.w	r2, r2, #14
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e00f      	b.n	8001888 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0204 	bic.w	r2, r2, #4
 8001876:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 020a 	orr.w	r2, r2, #10
 8001886:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e005      	b.n	80018dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018d8:	2302      	movs	r3, #2
 80018da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d005      	beq.n	800190a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2204      	movs	r2, #4
 8001902:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e037      	b.n	800197a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 020e 	bic.w	r2, r2, #14
 8001918:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001928:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001956:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00c      	beq.n	800197a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800196e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001978:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d00d      	beq.n	80019cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e047      	b.n	8001a5c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020e 	bic.w	r2, r2, #14
 80019da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00c      	beq.n	8001a3c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
    }
  }
  return status;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2204      	movs	r2, #4
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d026      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x7a>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d021      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d107      	bne.n	8001aba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0204 	bic.w	r2, r2, #4
 8001ab8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d071      	beq.n	8001bba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ade:	e06c      	b.n	8001bba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	2202      	movs	r2, #2
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d02e      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d029      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10b      	bne.n	8001b24 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 020a 	bic.w	r2, r2, #10
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	2102      	movs	r1, #2
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d038      	beq.n	8001bba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b50:	e033      	b.n	8001bba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d02a      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d025      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 020e 	bic.w	r2, r2, #14
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
}
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bda:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d004      	beq.n	8001bee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f003 021f 	and.w	r2, r3, #31
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d108      	bne.n	8001c24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c22:	e007      	b.n	8001c34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	60da      	str	r2, [r3, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d802      	bhi.n	8001c5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e001      	b.n	8001c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c5c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	009a      	lsls	r2, r3, #2
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2201      	movs	r2, #1
 8001c94:	409a      	lsls	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40020407 	.word	0x40020407
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020820 	.word	0x40020820
 8001cb4:	cccccccd 	.word	0xcccccccd
 8001cb8:	40020880 	.word	0x40020880

08001cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cde:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2201      	movs	r2, #1
 8001cea:	409a      	lsls	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	1000823f 	.word	0x1000823f
 8001d00:	40020940 	.word	0x40020940

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d12:	e15a      	b.n	8001fca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 814c 	beq.w	8001fc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d005      	beq.n	8001d44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d130      	bne.n	8001da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 0201 	and.w	r2, r3, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d017      	beq.n	8001de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d123      	bne.n	8001e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	08da      	lsrs	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3208      	adds	r2, #8
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a6 	beq.w	8001fc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e78:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe8 <HAL_GPIO_Init+0x2e4>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe8 <HAL_GPIO_Init+0x2e4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e84:	4b58      	ldr	r3, [pc, #352]	@ (8001fe8 <HAL_GPIO_Init+0x2e4>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e90:	4a56      	ldr	r2, [pc, #344]	@ (8001fec <HAL_GPIO_Init+0x2e8>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eba:	d01f      	beq.n	8001efc <HAL_GPIO_Init+0x1f8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff0 <HAL_GPIO_Init+0x2ec>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d019      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <HAL_GPIO_Init+0x2f0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff8 <HAL_GPIO_Init+0x2f4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a49      	ldr	r2, [pc, #292]	@ (8001ffc <HAL_GPIO_Init+0x2f8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a48      	ldr	r2, [pc, #288]	@ (8002000 <HAL_GPIO_Init+0x2fc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1e4>
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	e00a      	b.n	8001efe <HAL_GPIO_Init+0x1fa>
 8001ee8:	2306      	movs	r3, #6
 8001eea:	e008      	b.n	8001efe <HAL_GPIO_Init+0x1fa>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1fa>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1fa>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1fa>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1fa>
 8001efc:	2300      	movs	r3, #0
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f0e:	4937      	ldr	r1, [pc, #220]	@ (8001fec <HAL_GPIO_Init+0x2e8>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f1c:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f40:	4a30      	ldr	r2, [pc, #192]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6a:	4a26      	ldr	r2, [pc, #152]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f94:	4a1b      	ldr	r2, [pc, #108]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f ae9d 	bne.w	8001d14 <HAL_GPIO_Init+0x10>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	48000400 	.word	0x48000400
 8001ff4:	48000800 	.word	0x48000800
 8001ff8:	48000c00 	.word	0x48000c00
 8001ffc:	48001000 	.word	0x48001000
 8002000:	48001400 	.word	0x48001400
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
 8002014:	4613      	mov	r3, r2
 8002016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e002      	b.n	800202c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f806 	bl	8002068 <HAL_GPIO_EXTI_Callback>
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d141      	bne.n	8002112 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800208e:	4b4b      	ldr	r3, [pc, #300]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209a:	d131      	bne.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800209c:	4b47      	ldr	r3, [pc, #284]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020a2:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ac:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020b4:	4a41      	ldr	r2, [pc, #260]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020bc:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2232      	movs	r2, #50	@ 0x32
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4a3f      	ldr	r2, [pc, #252]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d2:	e002      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e6:	d102      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f2      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ee:	4b33      	ldr	r3, [pc, #204]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d158      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e057      	b.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002106:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800210c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002110:	e04d      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002118:	d141      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002126:	d131      	bne.n	800218c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002128:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800212e:	4a23      	ldr	r2, [pc, #140]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002140:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2232      	movs	r2, #50	@ 0x32
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	4a1c      	ldr	r2, [pc, #112]	@ (80021c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	3301      	adds	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215e:	e002      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3b01      	subs	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002172:	d102      	bne.n	800217a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f2      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002186:	d112      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e011      	b.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002198:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800219c:	e007      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40007000 	.word	0x40007000
 80021c0:	20000200 	.word	0x20000200
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d6:	6093      	str	r3, [r2, #8]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e2fe      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d075      	beq.n	80022f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b97      	ldr	r3, [pc, #604]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002210:	4b94      	ldr	r3, [pc, #592]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b0c      	cmp	r3, #12
 800221e:	d102      	bne.n	8002226 <HAL_RCC_OscConfig+0x3e>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d002      	beq.n	800222c <HAL_RCC_OscConfig+0x44>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b8d      	ldr	r3, [pc, #564]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x108>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d157      	bne.n	80022f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e2d9      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x74>
 800224e:	4b85      	ldr	r3, [pc, #532]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a84      	ldr	r2, [pc, #528]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002266:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7e      	ldr	r2, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b7c      	ldr	r3, [pc, #496]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7b      	ldr	r2, [pc, #492]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 8002280:	4b78      	ldr	r3, [pc, #480]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a77      	ldr	r2, [pc, #476]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b75      	ldr	r3, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a74      	ldr	r2, [pc, #464]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff f8e2 	bl	8001468 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff f8de 	bl	8001468 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e29e      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xc0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff f8ce 	bl	8001468 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff f8ca 	bl	8001468 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e28a      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022e2:	4b60      	ldr	r3, [pc, #384]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0xe8>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fe:	4b59      	ldr	r3, [pc, #356]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002308:	4b56      	ldr	r3, [pc, #344]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b0c      	cmp	r3, #12
 8002316:	d102      	bne.n	800231e <HAL_RCC_OscConfig+0x136>
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d002      	beq.n	8002324 <HAL_RCC_OscConfig+0x13c>
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d11f      	bne.n	8002364 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002324:	4b4f      	ldr	r3, [pc, #316]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x154>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e25d      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	4946      	ldr	r1, [pc, #280]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002350:	4b45      	ldr	r3, [pc, #276]	@ (8002468 <HAL_RCC_OscConfig+0x280>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f83b 	bl	80013d0 <HAL_InitTick>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d043      	beq.n	80023e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e249      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d023      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3c      	ldr	r2, [pc, #240]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff f876 	bl	8001468 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff f872 	bl	8001468 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e232      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002392:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b31      	ldr	r3, [pc, #196]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	492d      	ldr	r1, [pc, #180]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 80023b2:	e01a      	b.n	80023ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f852 	bl	8001468 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c8:	f7ff f84e 	bl	8001468 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e20e      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1e0>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d041      	beq.n	800247a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01c      	beq.n	8002438 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002404:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7ff f82b 	bl	8001468 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7ff f827 	bl	8001468 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1e7      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ef      	beq.n	8002416 <HAL_RCC_OscConfig+0x22e>
 8002436:	e020      	b.n	800247a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002438:	4b0a      	ldr	r3, [pc, #40]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243e:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_RCC_OscConfig+0x27c>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7ff f80e 	bl	8001468 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244e:	e00d      	b.n	800246c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff f80a 	bl	8001468 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d906      	bls.n	800246c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1ca      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246c:	4b8c      	ldr	r3, [pc, #560]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ea      	bne.n	8002450 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80a6 	beq.w	80025d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800248c:	4b84      	ldr	r3, [pc, #528]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x2b4>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x2b6>
 800249c:	2300      	movs	r3, #0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00d      	beq.n	80024be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	4a7e      	ldr	r2, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ae:	4b7c      	ldr	r3, [pc, #496]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024be:	4b79      	ldr	r3, [pc, #484]	@ (80026a4 <HAL_RCC_OscConfig+0x4bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCC_OscConfig+0x4bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x4bc>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7fe ffc7 	bl	8001468 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe ffc3 	bl	8001468 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e183      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f0:	4b6c      	ldr	r3, [pc, #432]	@ (80026a4 <HAL_RCC_OscConfig+0x4bc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d108      	bne.n	8002516 <HAL_RCC_OscConfig+0x32e>
 8002504:	4b66      	ldr	r3, [pc, #408]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250a:	4a65      	ldr	r2, [pc, #404]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002514:	e024      	b.n	8002560 <HAL_RCC_OscConfig+0x378>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d110      	bne.n	8002540 <HAL_RCC_OscConfig+0x358>
 800251e:	4b60      	ldr	r3, [pc, #384]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002524:	4a5e      	ldr	r2, [pc, #376]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800252e:	4b5c      	ldr	r3, [pc, #368]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002534:	4a5a      	ldr	r2, [pc, #360]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800253e:	e00f      	b.n	8002560 <HAL_RCC_OscConfig+0x378>
 8002540:	4b57      	ldr	r3, [pc, #348]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	4a56      	ldr	r2, [pc, #344]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002550:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d016      	beq.n	8002596 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe ff7e 	bl	8001468 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe ff7a 	bl	8001468 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e138      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	4b46      	ldr	r3, [pc, #280]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ed      	beq.n	8002570 <HAL_RCC_OscConfig+0x388>
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe ff67 	bl	8001468 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe ff63 	bl	8001468 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e121      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b4:	4b3a      	ldr	r3, [pc, #232]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ed      	bne.n	800259e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b35      	ldr	r3, [pc, #212]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	4a34      	ldr	r2, [pc, #208]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03c      	beq.n	800265a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ee:	4a2c      	ldr	r2, [pc, #176]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe ff36 	bl	8001468 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002600:	f7fe ff32 	bl	8001468 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0f2      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x418>
 8002620:	e01b      	b.n	800265a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002624:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002628:	4a1d      	ldr	r2, [pc, #116]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7fe ff19 	bl	8001468 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263a:	f7fe ff15 	bl	8001468 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0d5      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80c9 	beq.w	80027f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002664:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b0c      	cmp	r3, #12
 800266e:	f000 8083 	beq.w	8002778 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d15e      	bne.n	8002738 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <HAL_RCC_OscConfig+0x4b8>)
 8002680:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe feef 	bl	8001468 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268c:	e00c      	b.n	80026a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe feeb 	bl	8001468 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d905      	bls.n	80026a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0ab      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	4b55      	ldr	r3, [pc, #340]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ec      	bne.n	800268e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	4b52      	ldr	r3, [pc, #328]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	4b52      	ldr	r3, [pc, #328]	@ (8002804 <HAL_RCC_OscConfig+0x61c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6a11      	ldr	r1, [r2, #32]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026c4:	3a01      	subs	r2, #1
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	4311      	orrs	r1, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026ce:	0212      	lsls	r2, r2, #8
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026d6:	0852      	lsrs	r2, r2, #1
 80026d8:	3a01      	subs	r2, #1
 80026da:	0552      	lsls	r2, r2, #21
 80026dc:	4311      	orrs	r1, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026e2:	0852      	lsrs	r2, r2, #1
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0652      	lsls	r2, r2, #25
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026ee:	06d2      	lsls	r2, r2, #27
 80026f0:	430a      	orrs	r2, r1
 80026f2:	4943      	ldr	r1, [pc, #268]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b41      	ldr	r3, [pc, #260]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a40      	ldr	r2, [pc, #256]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002702:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002704:	4b3e      	ldr	r3, [pc, #248]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a3d      	ldr	r2, [pc, #244]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe feaa 	bl	8001468 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fea6 	bl	8001468 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e066      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	4b35      	ldr	r3, [pc, #212]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x530>
 8002736:	e05e      	b.n	80027f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b31      	ldr	r3, [pc, #196]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a30      	ldr	r2, [pc, #192]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 800273e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fe90 	bl	8001468 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fe8c 	bl	8001468 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04c      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275e:	4b28      	ldr	r3, [pc, #160]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800276a:	4b25      	ldr	r3, [pc, #148]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4924      	ldr	r1, [pc, #144]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 8002770:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <HAL_RCC_OscConfig+0x620>)
 8002772:	4013      	ands	r3, r2
 8002774:	60cb      	str	r3, [r1, #12]
 8002776:	e03e      	b.n	80027f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e039      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <HAL_RCC_OscConfig+0x618>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d12c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d123      	bne.n	80027f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d11b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d113      	bne.n	80027f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	019f800c 	.word	0x019f800c
 8002808:	feeefffc 	.word	0xfeeefffc

0800280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e11e      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b91      	ldr	r3, [pc, #580]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b8e      	ldr	r3, [pc, #568]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 020f 	bic.w	r2, r3, #15
 800283a:	498c      	ldr	r1, [pc, #560]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b8a      	ldr	r3, [pc, #552]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e106      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d073      	beq.n	8002948 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d129      	bne.n	80028bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002868:	4b81      	ldr	r3, [pc, #516]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0f4      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002878:	f000 f99e 	bl	8002bb8 <RCC_GetSysClockFreqFromPLLSource>
 800287c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4a7c      	ldr	r2, [pc, #496]	@ (8002a74 <HAL_RCC_ClockConfig+0x268>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d93f      	bls.n	8002906 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002886:	4b7a      	ldr	r3, [pc, #488]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800289a:	2b00      	cmp	r3, #0
 800289c:	d033      	beq.n	8002906 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d12f      	bne.n	8002906 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028a6:	4b72      	ldr	r3, [pc, #456]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ae:	4a70      	ldr	r2, [pc, #448]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80028b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	e024      	b.n	8002906 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0c6      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d4:	4b66      	ldr	r3, [pc, #408]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0be      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028e4:	f000 f8ce 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4a61      	ldr	r2, [pc, #388]	@ (8002a74 <HAL_RCC_ClockConfig+0x268>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d909      	bls.n	8002906 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002900:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b5a      	ldr	r3, [pc, #360]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4957      	ldr	r1, [pc, #348]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002918:	f7fe fda6 	bl	8001468 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fda2 	bl	8001468 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e095      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b4e      	ldr	r3, [pc, #312]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d023      	beq.n	800299c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002960:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a42      	ldr	r2, [pc, #264]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002966:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800296a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002978:	4b3d      	ldr	r3, [pc, #244]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002980:	4a3b      	ldr	r2, [pc, #236]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002982:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b39      	ldr	r3, [pc, #228]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4936      	ldr	r1, [pc, #216]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
 800299a:	e008      	b.n	80029ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b80      	cmp	r3, #128	@ 0x80
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029a2:	4b33      	ldr	r3, [pc, #204]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4a32      	ldr	r2, [pc, #200]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 80029a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ae:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d21d      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 020f 	bic.w	r2, r3, #15
 80029c4:	4929      	ldr	r1, [pc, #164]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fd4c 	bl	8001468 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fd48 	bl	8001468 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e03b      	b.n	8002a62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <HAL_RCC_ClockConfig+0x260>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1ed      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4917      	ldr	r1, [pc, #92]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a22:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	490f      	ldr	r1, [pc, #60]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a36:	f000 f825 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	490c      	ldr	r1, [pc, #48]	@ (8002a78 <HAL_RCC_ClockConfig+0x26c>)
 8002a48:	5ccb      	ldrb	r3, [r1, r3]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <HAL_RCC_ClockConfig+0x270>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_RCC_ClockConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fcb8 	bl	80013d0 <HAL_InitTick>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40021000 	.word	0x40021000
 8002a74:	04c4b400 	.word	0x04c4b400
 8002a78:	08006144 	.word	0x08006144
 8002a7c:	20000200 	.word	0x20000200
 8002a80:	20000204 	.word	0x20000204

08002a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d102      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a96:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	e047      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a9c:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aa8:	4b26      	ldr	r3, [pc, #152]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e03e      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002aae:	4b23      	ldr	r3, [pc, #140]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d136      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aba:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	4a16      	ldr	r2, [pc, #88]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae2:	68d2      	ldr	r2, [r2, #12]
 8002ae4:	0a12      	lsrs	r2, r2, #8
 8002ae6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	617b      	str	r3, [r7, #20]
      break;
 8002af0:	e00c      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af2:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	4a10      	ldr	r2, [pc, #64]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	0a12      	lsrs	r2, r2, #8
 8002b00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
      break;
 8002b0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0e5b      	lsrs	r3, r3, #25
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e001      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b2c:	693b      	ldr	r3, [r7, #16]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	016e3600 	.word	0x016e3600

08002b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000200 	.word	0x20000200

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b64:	f7ff fff0 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08006154 	.word	0x08006154

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b90:	f7ff ffda 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0adb      	lsrs	r3, r3, #11
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4904      	ldr	r1, [pc, #16]	@ (8002bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08006154 	.word	0x08006154

08002bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d10c      	bne.n	8002bf6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bdc:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be6:	68d2      	ldr	r2, [r2, #12]
 8002be8:	0a12      	lsrs	r2, r2, #8
 8002bea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
    break;
 8002bf4:	e00c      	b.n	8002c10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c00:	68d2      	ldr	r2, [r2, #12]
 8002c02:	0a12      	lsrs	r2, r2, #8
 8002c04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
    break;
 8002c0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0e5b      	lsrs	r3, r3, #25
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c2a:	687b      	ldr	r3, [r7, #4]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	016e3600 	.word	0x016e3600
 8002c40:	00f42400 	.word	0x00f42400

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c50:	2300      	movs	r3, #0
 8002c52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8098 	beq.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b43      	ldr	r3, [pc, #268]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	4a3f      	ldr	r2, [pc, #252]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a39      	ldr	r2, [pc, #228]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe fbe5 	bl	8001468 <HAL_GetTick>
 8002c9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca2:	f7fe fbe1 	bl	8001468 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	74fb      	strb	r3, [r7, #19]
        break;
 8002cb4:	e005      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb6:	4b30      	ldr	r3, [pc, #192]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ef      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d159      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01e      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d019      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ce4:	4b23      	ldr	r3, [pc, #140]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d00:	4b1c      	ldr	r3, [pc, #112]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d10:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fba1 	bl	8001468 <HAL_GetTick>
 8002d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d28:	e00b      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fb9d 	bl	8001468 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d902      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8002d40:	e006      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d42:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ec      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d56:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d64:	4903      	ldr	r1, [pc, #12]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d6c:	e008      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	74bb      	strb	r3, [r7, #18]
 8002d72:	e005      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d80:	7c7b      	ldrb	r3, [r7, #17]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4ba7      	ldr	r3, [pc, #668]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	4aa6      	ldr	r2, [pc, #664]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9e:	4ba1      	ldr	r3, [pc, #644]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	499d      	ldr	r1, [pc, #628]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dc0:	4b98      	ldr	r3, [pc, #608]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 020c 	bic.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4995      	ldr	r1, [pc, #596]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de2:	4b90      	ldr	r3, [pc, #576]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	498c      	ldr	r1, [pc, #560]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e04:	4b87      	ldr	r3, [pc, #540]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	4984      	ldr	r1, [pc, #528]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e26:	4b7f      	ldr	r3, [pc, #508]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	497b      	ldr	r1, [pc, #492]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e48:	4b76      	ldr	r3, [pc, #472]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	4973      	ldr	r1, [pc, #460]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	496a      	ldr	r1, [pc, #424]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e8c:	4b65      	ldr	r3, [pc, #404]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4962      	ldr	r1, [pc, #392]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eae:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	4959      	ldr	r1, [pc, #356]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ed0:	4b54      	ldr	r3, [pc, #336]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ed6:	f023 0203 	bic.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	4951      	ldr	r1, [pc, #324]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	4948      	ldr	r1, [pc, #288]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f14:	4b43      	ldr	r3, [pc, #268]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	4940      	ldr	r1, [pc, #256]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f32:	d105      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f34:	4b3b      	ldr	r3, [pc, #236]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4a3a      	ldr	r2, [pc, #232]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d015      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f4c:	4b35      	ldr	r3, [pc, #212]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5a:	4932      	ldr	r1, [pc, #200]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f84:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	4924      	ldr	r1, [pc, #144]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	4916      	ldr	r1, [pc, #88]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a10      	ldr	r2, [pc, #64]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d019      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4908      	ldr	r1, [pc, #32]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003012:	d109      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003014:	4b03      	ldr	r3, [pc, #12]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a02      	ldr	r2, [pc, #8]	@ (8003024 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800301e:	60d3      	str	r3, [r2, #12]
 8003020:	e002      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003034:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	4926      	ldr	r1, [pc, #152]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003052:	d105      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003054:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a20      	ldr	r2, [pc, #128]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800306c:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307a:	4918      	ldr	r1, [pc, #96]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308a:	d105      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003096:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030a4:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b2:	490a      	ldr	r1, [pc, #40]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c2:	d105      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e054      	b.n	800319c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d111      	bne.n	8003122 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 ff86 	bl	8004018 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a23      	ldr	r2, [pc, #140]	@ (80031a4 <HAL_TIM_Base_Init+0xc4>)
 8003118:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 fdf9 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	08001081 	.word	0x08001081

080031a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d001      	beq.n	80031c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e054      	b.n	800326a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <HAL_TIM_Base_Start_IT+0xd0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d022      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ea:	d01d      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a22      	ldr	r2, [pc, #136]	@ (800327c <HAL_TIM_Base_Start_IT+0xd4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d018      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	@ (8003280 <HAL_TIM_Base_Start_IT+0xd8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1f      	ldr	r2, [pc, #124]	@ (8003284 <HAL_TIM_Base_Start_IT+0xdc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00e      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1e      	ldr	r2, [pc, #120]	@ (8003288 <HAL_TIM_Base_Start_IT+0xe0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <HAL_TIM_Base_Start_IT+0xe4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x80>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <HAL_TIM_Base_Start_IT+0xe8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d115      	bne.n	8003254 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_TIM_Base_Start_IT+0xec>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d015      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0xbe>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d011      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	e008      	b.n	8003266 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e000      	b.n	8003268 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40000400 	.word	0x40000400
 8003280:	40000800 	.word	0x40000800
 8003284:	40000c00 	.word	0x40000c00
 8003288:	40013400 	.word	0x40013400
 800328c:	40014000 	.word	0x40014000
 8003290:	40015000 	.word	0x40015000
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e04c      	b.n	8003346 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fea9 	bl	8004018 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <HAL_TIM_OnePulse_Init+0xb8>)
 80032d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fd1c 	bl	8003d2c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0208 	bic.w	r2, r2, #8
 8003302:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	08003355 	.word	0x08003355

08003354 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003378:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003380:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003388:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003390:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d108      	bne.n	80033aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003398:	7bbb      	ldrb	r3, [r7, #14]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800339e:	7b7b      	ldrb	r3, [r7, #13]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80033a4:	7b3b      	ldrb	r3, [r7, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e059      	b.n	8003462 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0202 	orr.w	r2, r2, #2
 80033dc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0204 	orr.w	r2, r2, #4
 80033ec:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fde8 	bl	8003fcc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2201      	movs	r2, #1
 8003402:	2104      	movs	r1, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fde1 	bl	8003fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d018      	beq.n	8003446 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a15      	ldr	r2, [pc, #84]	@ (8003470 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_TIM_OnePulse_Start_IT+0xde>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a14      	ldr	r2, [pc, #80]	@ (8003474 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a12      	ldr	r2, [pc, #72]	@ (8003478 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a11      	ldr	r2, [pc, #68]	@ (800347c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_TIM_OnePulse_Start_IT+0xde>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0f      	ldr	r2, [pc, #60]	@ (8003480 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800
 8003480:	40015000 	.word	0x40015000

08003484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d026      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d021      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0202 	mvn.w	r2, #2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e009      	b.n	80034ee <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d026      	beq.n	800354c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d021      	beq.n	800354c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0204 	mvn.w	r2, #4
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e009      	b.n	8003546 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d026      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d021      	beq.n	80035a4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0208 	mvn.w	r2, #8
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e009      	b.n	800359e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d026      	beq.n	80035fc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d021      	beq.n	80035fc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2208      	movs	r2, #8
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
 80035e0:	e009      	b.n	80035f6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800364a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0220 	mvn.w	r2, #32
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00e      	beq.n	800376e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIM_ConfigClockSource+0x1c>
 8003790:	2302      	movs	r3, #2
 8003792:	e0f6      	b.n	8003982 <HAL_TIM_ConfigClockSource+0x20a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80037b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6f      	ldr	r2, [pc, #444]	@ (800398c <HAL_TIM_ConfigClockSource+0x214>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f000 80c1 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80037d4:	4a6d      	ldr	r2, [pc, #436]	@ (800398c <HAL_TIM_ConfigClockSource+0x214>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f200 80c6 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 80037dc:	4a6c      	ldr	r2, [pc, #432]	@ (8003990 <HAL_TIM_ConfigClockSource+0x218>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f000 80b9 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80037e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003990 <HAL_TIM_ConfigClockSource+0x218>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f200 80be 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 80037ec:	4a69      	ldr	r2, [pc, #420]	@ (8003994 <HAL_TIM_ConfigClockSource+0x21c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f000 80b1 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80037f4:	4a67      	ldr	r2, [pc, #412]	@ (8003994 <HAL_TIM_ConfigClockSource+0x21c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f200 80b6 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 80037fc:	4a66      	ldr	r2, [pc, #408]	@ (8003998 <HAL_TIM_ConfigClockSource+0x220>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	f000 80a9 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003804:	4a64      	ldr	r2, [pc, #400]	@ (8003998 <HAL_TIM_ConfigClockSource+0x220>)
 8003806:	4293      	cmp	r3, r2
 8003808:	f200 80ae 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	4a63      	ldr	r2, [pc, #396]	@ (800399c <HAL_TIM_ConfigClockSource+0x224>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f000 80a1 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003814:	4a61      	ldr	r2, [pc, #388]	@ (800399c <HAL_TIM_ConfigClockSource+0x224>)
 8003816:	4293      	cmp	r3, r2
 8003818:	f200 80a6 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800381c:	4a60      	ldr	r2, [pc, #384]	@ (80039a0 <HAL_TIM_ConfigClockSource+0x228>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f000 8099 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003824:	4a5e      	ldr	r2, [pc, #376]	@ (80039a0 <HAL_TIM_ConfigClockSource+0x228>)
 8003826:	4293      	cmp	r3, r2
 8003828:	f200 809e 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800382c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003830:	f000 8091 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003834:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003838:	f200 8096 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800383c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003840:	f000 8089 	beq.w	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003848:	f200 808e 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003850:	d03e      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0x158>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003856:	f200 8087 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	f000 8086 	beq.w	800396e <HAL_TIM_ConfigClockSource+0x1f6>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d87f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003868:	2b70      	cmp	r3, #112	@ 0x70
 800386a:	d01a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x12a>
 800386c:	2b70      	cmp	r3, #112	@ 0x70
 800386e:	d87b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003870:	2b60      	cmp	r3, #96	@ 0x60
 8003872:	d050      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x19e>
 8003874:	2b60      	cmp	r3, #96	@ 0x60
 8003876:	d877      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003878:	2b50      	cmp	r3, #80	@ 0x50
 800387a:	d03c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x17e>
 800387c:	2b50      	cmp	r3, #80	@ 0x50
 800387e:	d873      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d058      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x1be>
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d86f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003888:	2b30      	cmp	r3, #48	@ 0x30
 800388a:	d064      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d86b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d060      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d867      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05c      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d05a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x1de>
 80038a0:	e062      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b2:	f000 fb6b 	bl	8003f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e04f      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	f000 fb54 	bl	8003f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f2:	609a      	str	r2, [r3, #8]
      break;
 80038f4:	e03c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 fac6 	bl	8003e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2150      	movs	r1, #80	@ 0x50
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fb1f 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003914:	e02c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003922:	461a      	mov	r2, r3
 8003924:	f000 fae5 	bl	8003ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2160      	movs	r1, #96	@ 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fb0f 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003934:	e01c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	461a      	mov	r2, r3
 8003944:	f000 faa6 	bl	8003e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	@ 0x40
 800394e:	4618      	mov	r0, r3
 8003950:	f000 faff 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003954:	e00c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 faf6 	bl	8003f52 <TIM_ITRx_SetConfig>
      break;
 8003966:	e003      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e000      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800396e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	00100070 	.word	0x00100070
 8003990:	00100060 	.word	0x00100060
 8003994:	00100050 	.word	0x00100050
 8003998:	00100040 	.word	0x00100040
 800399c:	00100030 	.word	0x00100030
 80039a0:	00100020 	.word	0x00100020

080039a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	460b      	mov	r3, r1
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e14a      	b.n	8003d1e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	f040 80dd 	bne.w	8003c50 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	2b1f      	cmp	r3, #31
 8003a9a:	f200 80d6 	bhi.w	8003c4a <HAL_TIM_RegisterCallback+0x1de>
 8003a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <HAL_TIM_RegisterCallback+0x38>)
 8003aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa4:	08003b25 	.word	0x08003b25
 8003aa8:	08003b2d 	.word	0x08003b2d
 8003aac:	08003b35 	.word	0x08003b35
 8003ab0:	08003b3d 	.word	0x08003b3d
 8003ab4:	08003b45 	.word	0x08003b45
 8003ab8:	08003b4d 	.word	0x08003b4d
 8003abc:	08003b55 	.word	0x08003b55
 8003ac0:	08003b5d 	.word	0x08003b5d
 8003ac4:	08003b65 	.word	0x08003b65
 8003ac8:	08003b6d 	.word	0x08003b6d
 8003acc:	08003b75 	.word	0x08003b75
 8003ad0:	08003b7d 	.word	0x08003b7d
 8003ad4:	08003b85 	.word	0x08003b85
 8003ad8:	08003b8d 	.word	0x08003b8d
 8003adc:	08003b97 	.word	0x08003b97
 8003ae0:	08003ba1 	.word	0x08003ba1
 8003ae4:	08003bab 	.word	0x08003bab
 8003ae8:	08003bb5 	.word	0x08003bb5
 8003aec:	08003bbf 	.word	0x08003bbf
 8003af0:	08003bc9 	.word	0x08003bc9
 8003af4:	08003bd3 	.word	0x08003bd3
 8003af8:	08003bdd 	.word	0x08003bdd
 8003afc:	08003be7 	.word	0x08003be7
 8003b00:	08003bf1 	.word	0x08003bf1
 8003b04:	08003bfb 	.word	0x08003bfb
 8003b08:	08003c05 	.word	0x08003c05
 8003b0c:	08003c0f 	.word	0x08003c0f
 8003b10:	08003c19 	.word	0x08003c19
 8003b14:	08003c23 	.word	0x08003c23
 8003b18:	08003c2d 	.word	0x08003c2d
 8003b1c:	08003c37 	.word	0x08003c37
 8003b20:	08003c41 	.word	0x08003c41
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003b2a:	e0f7      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003b32:	e0f3      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003b3a:	e0ef      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003b42:	e0eb      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003b4a:	e0e7      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003b52:	e0e3      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003b5a:	e0df      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003b62:	e0db      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003b6a:	e0d7      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003b72:	e0d3      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003b7a:	e0cf      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003b82:	e0cb      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003b8a:	e0c7      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003b94:	e0c2      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003b9e:	e0bd      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003ba8:	e0b8      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003bb2:	e0b3      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003bbc:	e0ae      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003bc6:	e0a9      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003bd0:	e0a4      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003bda:	e09f      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003be4:	e09a      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003bee:	e095      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003bf8:	e090      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003c02:	e08b      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003c0c:	e086      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003c16:	e081      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003c20:	e07c      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003c2a:	e077      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003c34:	e072      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003c3e:	e06d      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003c48:	e068      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003c4e:	e065      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d15d      	bne.n	8003d18 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	2b0d      	cmp	r3, #13
 8003c60:	d857      	bhi.n	8003d12 <HAL_TIM_RegisterCallback+0x2a6>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <HAL_TIM_RegisterCallback+0x1fc>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003ca9 	.word	0x08003ca9
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cc1 	.word	0x08003cc1
 8003c7c:	08003cc9 	.word	0x08003cc9
 8003c80:	08003cd1 	.word	0x08003cd1
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003ce9 	.word	0x08003ce9
 8003c90:	08003cf1 	.word	0x08003cf1
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003d01 	.word	0x08003d01
 8003c9c:	08003d09 	.word	0x08003d09
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003ca6:	e039      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003cae:	e035      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003cb6:	e031      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003cbe:	e02d      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003cc6:	e029      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003cce:	e025      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003cd6:	e021      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003cde:	e01d      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003ce6:	e019      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003cee:	e015      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003cf6:	e011      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003cfe:	e00d      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003d06:	e009      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003d10:	e004      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
        break;
 8003d16:	e001      	b.n	8003d1c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e70 <TIM_Base_SetConfig+0x144>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d017      	beq.n	8003d74 <TIM_Base_SetConfig+0x48>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4a:	d013      	beq.n	8003d74 <TIM_Base_SetConfig+0x48>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a49      	ldr	r2, [pc, #292]	@ (8003e74 <TIM_Base_SetConfig+0x148>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00f      	beq.n	8003d74 <TIM_Base_SetConfig+0x48>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a48      	ldr	r2, [pc, #288]	@ (8003e78 <TIM_Base_SetConfig+0x14c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x48>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a47      	ldr	r2, [pc, #284]	@ (8003e7c <TIM_Base_SetConfig+0x150>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x48>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a46      	ldr	r2, [pc, #280]	@ (8003e80 <TIM_Base_SetConfig+0x154>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x48>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a45      	ldr	r2, [pc, #276]	@ (8003e84 <TIM_Base_SetConfig+0x158>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a39      	ldr	r2, [pc, #228]	@ (8003e70 <TIM_Base_SetConfig+0x144>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d023      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d94:	d01f      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a36      	ldr	r2, [pc, #216]	@ (8003e74 <TIM_Base_SetConfig+0x148>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01b      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a35      	ldr	r2, [pc, #212]	@ (8003e78 <TIM_Base_SetConfig+0x14c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d017      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a34      	ldr	r2, [pc, #208]	@ (8003e7c <TIM_Base_SetConfig+0x150>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a33      	ldr	r2, [pc, #204]	@ (8003e80 <TIM_Base_SetConfig+0x154>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00f      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a33      	ldr	r2, [pc, #204]	@ (8003e88 <TIM_Base_SetConfig+0x15c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a32      	ldr	r2, [pc, #200]	@ (8003e8c <TIM_Base_SetConfig+0x160>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a31      	ldr	r2, [pc, #196]	@ (8003e90 <TIM_Base_SetConfig+0x164>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_Base_SetConfig+0xaa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <TIM_Base_SetConfig+0x158>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <TIM_Base_SetConfig+0x144>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <TIM_Base_SetConfig+0x110>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <TIM_Base_SetConfig+0x154>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00f      	beq.n	8003e3c <TIM_Base_SetConfig+0x110>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e88 <TIM_Base_SetConfig+0x15c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <TIM_Base_SetConfig+0x110>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a19      	ldr	r2, [pc, #100]	@ (8003e8c <TIM_Base_SetConfig+0x160>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <TIM_Base_SetConfig+0x110>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a18      	ldr	r2, [pc, #96]	@ (8003e90 <TIM_Base_SetConfig+0x164>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0x110>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <TIM_Base_SetConfig+0x158>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]
  }
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40013400 	.word	0x40013400
 8003e84:	40015000 	.word	0x40015000
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40014400 	.word	0x40014400
 8003e90:	40014800 	.word	0x40014800

08003e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 030a 	bic.w	r3, r3, #10
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f023 0210 	bic.w	r2, r3, #16
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	031b      	lsls	r3, r3, #12
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f043 0307 	orr.w	r3, r3, #7
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	021a      	lsls	r2, r3, #8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	401a      	ands	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a26      	ldr	r2, [pc, #152]	@ (80040bc <TIM_ResetCallback+0xa4>)
 8004024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a25      	ldr	r2, [pc, #148]	@ (80040c0 <TIM_ResetCallback+0xa8>)
 800402c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a24      	ldr	r2, [pc, #144]	@ (80040c4 <TIM_ResetCallback+0xac>)
 8004034:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a23      	ldr	r2, [pc, #140]	@ (80040c8 <TIM_ResetCallback+0xb0>)
 800403c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a22      	ldr	r2, [pc, #136]	@ (80040cc <TIM_ResetCallback+0xb4>)
 8004044:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a21      	ldr	r2, [pc, #132]	@ (80040d0 <TIM_ResetCallback+0xb8>)
 800404c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <TIM_ResetCallback+0xbc>)
 8004054:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1f      	ldr	r2, [pc, #124]	@ (80040d8 <TIM_ResetCallback+0xc0>)
 800405c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1e      	ldr	r2, [pc, #120]	@ (80040dc <TIM_ResetCallback+0xc4>)
 8004064:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <TIM_ResetCallback+0xc8>)
 800406c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1c      	ldr	r2, [pc, #112]	@ (80040e4 <TIM_ResetCallback+0xcc>)
 8004074:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a1b      	ldr	r2, [pc, #108]	@ (80040e8 <TIM_ResetCallback+0xd0>)
 800407c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1a      	ldr	r2, [pc, #104]	@ (80040ec <TIM_ResetCallback+0xd4>)
 8004084:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a19      	ldr	r2, [pc, #100]	@ (80040f0 <TIM_ResetCallback+0xd8>)
 800408c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a18      	ldr	r2, [pc, #96]	@ (80040f4 <TIM_ResetCallback+0xdc>)
 8004094:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a17      	ldr	r2, [pc, #92]	@ (80040f8 <TIM_ResetCallback+0xe0>)
 800409c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <TIM_ResetCallback+0xe4>)
 80040a4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <TIM_ResetCallback+0xe8>)
 80040ac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	080039a5 	.word	0x080039a5
 80040c0:	080039b9 	.word	0x080039b9
 80040c4:	08003a31 	.word	0x08003a31
 80040c8:	08003a45 	.word	0x08003a45
 80040cc:	080039e1 	.word	0x080039e1
 80040d0:	080039f5 	.word	0x080039f5
 80040d4:	080039cd 	.word	0x080039cd
 80040d8:	08003a09 	.word	0x08003a09
 80040dc:	08003a1d 	.word	0x08003a1d
 80040e0:	08003a59 	.word	0x08003a59
 80040e4:	08004231 	.word	0x08004231
 80040e8:	08004245 	.word	0x08004245
 80040ec:	08004259 	.word	0x08004259
 80040f0:	0800426d 	.word	0x0800426d
 80040f4:	08004281 	.word	0x08004281
 80040f8:	08004295 	.word	0x08004295
 80040fc:	080042a9 	.word	0x080042a9
 8004100:	080042bd 	.word	0x080042bd

08004104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004118:	2302      	movs	r3, #2
 800411a:	e074      	b.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a34      	ldr	r2, [pc, #208]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a33      	ldr	r2, [pc, #204]	@ (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a31      	ldr	r2, [pc, #196]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004160:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d022      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d01d      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004224 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a18      	ldr	r2, [pc, #96]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a11      	ldr	r2, [pc, #68]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10c      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00
 8004218:	40013400 	.word	0x40013400
 800421c:	40015000 	.word	0x40015000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40014000 	.word	0x40014000

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e050      	b.n	8004384 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d114      	bne.n	8004316 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fdc5 	bl	8004e84 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a21      	ldr	r2, [pc, #132]	@ (800438c <HAL_UART_Init+0xbc>)
 8004308:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	@ 0x24
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 f8f2 	bl	8005520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fdf3 	bl	8004f28 <UART_SetConfig>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e01b      	b.n	8004384 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800435a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800436a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f971 	bl	8005664 <UART_CheckIdleState>
 8004382:	4603      	mov	r3, r0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	080010f1 	.word	0x080010f1

08004390 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	460b      	mov	r3, r1
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e09c      	b.n	80044f6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d16c      	bne.n	80044a0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80043c6:	7afb      	ldrb	r3, [r7, #11]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d85e      	bhi.n	800448a <HAL_UART_RegisterCallback+0xfa>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <HAL_UART_RegisterCallback+0x44>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	08004409 	.word	0x08004409
 80043d8:	08004413 	.word	0x08004413
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	08004427 	.word	0x08004427
 80043e4:	08004431 	.word	0x08004431
 80043e8:	0800443b 	.word	0x0800443b
 80043ec:	08004445 	.word	0x08004445
 80043f0:	0800444f 	.word	0x0800444f
 80043f4:	08004459 	.word	0x08004459
 80043f8:	08004463 	.word	0x08004463
 80043fc:	0800446d 	.word	0x0800446d
 8004400:	08004477 	.word	0x08004477
 8004404:	08004481 	.word	0x08004481
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004410:	e070      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800441a:	e06b      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004424:	e066      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800442e:	e061      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8004438:	e05c      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8004442:	e057      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800444c:	e052      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8004456:	e04d      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8004460:	e048      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800446a:	e043      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8004474:	e03e      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800447e:	e039      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004488:	e034      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004490:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
        break;
 800449e:	e029      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d11a      	bne.n	80044e0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80044aa:	7afb      	ldrb	r3, [r7, #11]
 80044ac:	2b0b      	cmp	r3, #11
 80044ae:	d002      	beq.n	80044b6 <HAL_UART_RegisterCallback+0x126>
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d005      	beq.n	80044c0 <HAL_UART_RegisterCallback+0x130>
 80044b4:	e009      	b.n	80044ca <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80044be:	e019      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80044c8:	e014      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
        break;
 80044de:	e009      	b.n	80044f4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop

08004504 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	@ 0x28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	2b20      	cmp	r3, #32
 800451a:	d167      	bne.n	80045ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Transmit_DMA+0x24>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e060      	b.n	80045ee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2221      	movs	r2, #33	@ 0x21
 800454e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d028      	beq.n	80045ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800455e:	4a26      	ldr	r2, [pc, #152]	@ (80045f8 <HAL_UART_Transmit_DMA+0xf4>)
 8004560:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004566:	4a25      	ldr	r2, [pc, #148]	@ (80045fc <HAL_UART_Transmit_DMA+0xf8>)
 8004568:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800456e:	4a24      	ldr	r2, [pc, #144]	@ (8004600 <HAL_UART_Transmit_DMA+0xfc>)
 8004570:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004576:	2200      	movs	r2, #0
 8004578:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004582:	4619      	mov	r1, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3328      	adds	r3, #40	@ 0x28
 800458a:	461a      	mov	r2, r3
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	f7fd f92f 	bl	80017f0 <HAL_DMA_Start_IT>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d009      	beq.n	80045ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2210      	movs	r2, #16
 800459c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e020      	b.n	80045ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2240      	movs	r2, #64	@ 0x40
 80045b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	623a      	str	r2, [r7, #32]
 80045d6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e5      	bne.n	80045b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3728      	adds	r7, #40	@ 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	08005b2f 	.word	0x08005b2f
 80045fc:	08005bcd 	.word	0x08005bcd
 8004600:	08005d67 	.word	0x08005d67

08004604 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	@ 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004618:	2b20      	cmp	r3, #32
 800461a:	d137      	bne.n	800468c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Receive_DMA+0x24>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e030      	b.n	800468e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <HAL_UART_Receive_DMA+0x94>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01f      	beq.n	800467c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69f9      	ldr	r1, [r7, #28]
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	61bb      	str	r3, [r7, #24]
   return(result);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	461a      	mov	r2, r3
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f001 f906 	bl	8005894 <UART_Start_Receive_DMA>
 8004688:	4603      	mov	r3, r0
 800468a:	e000      	b.n	800468e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3728      	adds	r7, #40	@ 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40008000 	.word	0x40008000

0800469c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b0ba      	sub	sp, #232	@ 0xe8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80046ca:	4013      	ands	r3, r2
 80046cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80046d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11b      	bne.n	8004710 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 82f3 	beq.w	8004cec <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
      }
      return;
 800470e:	e2ed      	b.n	8004cec <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8129 	beq.w	800496c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800471a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800471e:	4b90      	ldr	r3, [pc, #576]	@ (8004960 <HAL_UART_IRQHandler+0x2c4>)
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800472a:	4b8e      	ldr	r3, [pc, #568]	@ (8004964 <HAL_UART_IRQHandler+0x2c8>)
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 811c 	beq.w	800496c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d011      	beq.n	8004764 <HAL_UART_IRQHandler+0xc8>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <HAL_UART_IRQHandler+0xf8>
 8004770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2202      	movs	r2, #2
 8004782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d011      	beq.n	80047c4 <HAL_UART_IRQHandler+0x128>
 80047a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2204      	movs	r2, #4
 80047b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d017      	beq.n	8004800 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80047dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80047e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004960 <HAL_UART_IRQHandler+0x2c4>)
 80047e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	f043 0208 	orr.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <HAL_UART_IRQHandler+0x196>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004810:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00c      	beq.n	8004832 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8259 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d105      	bne.n	8004862 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800488a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800488e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d058      	beq.n	8004948 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f001 f8e3 	bl	8005a62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a6:	2b40      	cmp	r3, #64	@ 0x40
 80048a8:	d148      	bne.n	800493c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1d9      	bne.n	80048aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d017      	beq.n	8004930 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004906:	4a18      	ldr	r2, [pc, #96]	@ (8004968 <HAL_UART_IRQHandler+0x2cc>)
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004910:	4618      	mov	r0, r3
 8004912:	f7fd f841 	bl	8001998 <HAL_DMA_Abort_IT>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01f      	beq.n	800495c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800492a:	4610      	mov	r0, r2
 800492c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492e:	e015      	b.n	800495c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493a:	e00f      	b.n	800495c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	e009      	b.n	800495c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800495a:	e1c9      	b.n	8004cf0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	bf00      	nop
    return;
 800495e:	e1c7      	b.n	8004cf0 <HAL_UART_IRQHandler+0x654>
 8004960:	10000001 	.word	0x10000001
 8004964:	04000120 	.word	0x04000120
 8004968:	08005deb 	.word	0x08005deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004970:	2b01      	cmp	r3, #1
 8004972:	f040 8157 	bne.w	8004c24 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 8150 	beq.w	8004c24 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8149 	beq.w	8004c24 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2210      	movs	r2, #16
 8004998:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b40      	cmp	r3, #64	@ 0x40
 80049a6:	f040 80bd 	bne.w	8004b24 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8199 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049cc:	429a      	cmp	r2, r3
 80049ce:	f080 8191 	bcs.w	8004cf4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f040 8087 	bne.w	8004afe <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1da      	bne.n	80049f0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e1      	bne.n	8004a3a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004acc:	f023 0310 	bic.w	r3, r3, #16
 8004ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ade:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ae0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e4      	bne.n	8004abc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fc fef4 	bl	80018e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004b16:	b292      	uxth	r2, r2
 8004b18:	1a8a      	subs	r2, r1, r2
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b22:	e0e7      	b.n	8004cf4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80d9 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004b46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80d4 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b74:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e4      	bne.n	8004b50 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	623b      	str	r3, [r7, #32]
   return(result);
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e1      	bne.n	8004b86 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	69b9      	ldr	r1, [r7, #24]
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	617b      	str	r3, [r7, #20]
   return(result);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e4      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c18:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c22:	e069      	b.n	8004cf8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_UART_IRQHandler+0x5b6>
 8004c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004c44:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c50:	e055      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d014      	beq.n	8004c88 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03e      	beq.n	8004cfc <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
    }
    return;
 8004c86:	e039      	b.n	8004cfc <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x60c>
 8004c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 f8ba 	bl	8005e1a <UART_EndTransmit_IT>
    return;
 8004ca6:	e02a      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00b      	beq.n	8004ccc <HAL_UART_IRQHandler+0x630>
 8004cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cca:	e018      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_UART_IRQHandler+0x662>
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da0e      	bge.n	8004cfe <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cea:	e008      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
      return;
 8004cec:	bf00      	nop
 8004cee:	e006      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
    return;
 8004cf0:	bf00      	nop
 8004cf2:	e004      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
      return;
 8004cf4:	bf00      	nop
 8004cf6:	e002      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
      return;
 8004cf8:	bf00      	nop
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_IRQHandler+0x662>
    return;
 8004cfc:	bf00      	nop
  }
}
 8004cfe:	37e8      	adds	r7, #232	@ 0xe8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	615a      	str	r2, [r3, #20]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40008000 	.word	0x40008000

08004df4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <HAL_UART_EnableReceiverTimeout+0x70>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d027      	beq.n	8004e56 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d120      	bne.n	8004e52 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_EnableReceiverTimeout+0x2a>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e01c      	b.n	8004e58 <HAL_UART_EnableReceiverTimeout+0x64>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2224      	movs	r2, #36	@ 0x24
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004e3c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e002      	b.n	8004e58 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
 8004e54:	e000      	b.n	8004e58 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
  }
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40008000 	.word	0x40008000

08004e68 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef8 <UART_InitCallbacksToDefault+0x74>)
 8004e90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a19      	ldr	r2, [pc, #100]	@ (8004efc <UART_InitCallbacksToDefault+0x78>)
 8004e98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	@ (8004f00 <UART_InitCallbacksToDefault+0x7c>)
 8004ea0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a17      	ldr	r2, [pc, #92]	@ (8004f04 <UART_InitCallbacksToDefault+0x80>)
 8004ea8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a16      	ldr	r2, [pc, #88]	@ (8004f08 <UART_InitCallbacksToDefault+0x84>)
 8004eb0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	@ (8004f0c <UART_InitCallbacksToDefault+0x88>)
 8004eb8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <UART_InitCallbacksToDefault+0x8c>)
 8004ec0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a13      	ldr	r2, [pc, #76]	@ (8004f14 <UART_InitCallbacksToDefault+0x90>)
 8004ec8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a12      	ldr	r2, [pc, #72]	@ (8004f18 <UART_InitCallbacksToDefault+0x94>)
 8004ed0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a11      	ldr	r2, [pc, #68]	@ (8004f1c <UART_InitCallbacksToDefault+0x98>)
 8004ed8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a10      	ldr	r2, [pc, #64]	@ (8004f20 <UART_InitCallbacksToDefault+0x9c>)
 8004ee0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8004f24 <UART_InitCallbacksToDefault+0xa0>)
 8004ee8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	08004d19 	.word	0x08004d19
 8004efc:	08004d05 	.word	0x08004d05
 8004f00:	08004d41 	.word	0x08004d41
 8004f04:	08004d2d 	.word	0x08004d2d
 8004f08:	08004d55 	.word	0x08004d55
 8004f0c:	08004d69 	.word	0x08004d69
 8004f10:	08004d7d 	.word	0x08004d7d
 8004f14:	08004d91 	.word	0x08004d91
 8004f18:	08005e75 	.word	0x08005e75
 8004f1c:	08005e89 	.word	0x08005e89
 8004f20:	08005e9d 	.word	0x08005e9d
 8004f24:	08004da5 	.word	0x08004da5

08004f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f2c:	b08c      	sub	sp, #48	@ 0x30
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4baa      	ldr	r3, [pc, #680]	@ (8005200 <UART_SetConfig+0x2d8>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a9f      	ldr	r2, [pc, #636]	@ (8005204 <UART_SetConfig+0x2dc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f90:	4313      	orrs	r3, r2
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	f023 010f 	bic.w	r1, r3, #15
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a90      	ldr	r2, [pc, #576]	@ (8005208 <UART_SetConfig+0x2e0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d125      	bne.n	8005018 <UART_SetConfig+0xf0>
 8004fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800520c <UART_SetConfig+0x2e4>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d81a      	bhi.n	8005010 <UART_SetConfig+0xe8>
 8004fda:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0xb8>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff6:	e116      	b.n	8005226 <UART_SetConfig+0x2fe>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ffe:	e112      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005006:	e10e      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800500e:	e10a      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005016:	e106      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7c      	ldr	r2, [pc, #496]	@ (8005210 <UART_SetConfig+0x2e8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d138      	bne.n	8005094 <UART_SetConfig+0x16c>
 8005022:	4b7a      	ldr	r3, [pc, #488]	@ (800520c <UART_SetConfig+0x2e4>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	f003 030c 	and.w	r3, r3, #12
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d82d      	bhi.n	800508c <UART_SetConfig+0x164>
 8005030:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <UART_SetConfig+0x110>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800506d 	.word	0x0800506d
 800503c:	0800508d 	.word	0x0800508d
 8005040:	0800508d 	.word	0x0800508d
 8005044:	0800508d 	.word	0x0800508d
 8005048:	0800507d 	.word	0x0800507d
 800504c:	0800508d 	.word	0x0800508d
 8005050:	0800508d 	.word	0x0800508d
 8005054:	0800508d 	.word	0x0800508d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800508d 	.word	0x0800508d
 8005060:	0800508d 	.word	0x0800508d
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005085 	.word	0x08005085
 800506c:	2300      	movs	r3, #0
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005072:	e0d8      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507a:	e0d4      	b.n	8005226 <UART_SetConfig+0x2fe>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005082:	e0d0      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e0cc      	b.n	8005226 <UART_SetConfig+0x2fe>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e0c8      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5e      	ldr	r2, [pc, #376]	@ (8005214 <UART_SetConfig+0x2ec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d125      	bne.n	80050ea <UART_SetConfig+0x1c2>
 800509e:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <UART_SetConfig+0x2e4>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d016      	beq.n	80050da <UART_SetConfig+0x1b2>
 80050ac:	2b30      	cmp	r3, #48	@ 0x30
 80050ae:	d818      	bhi.n	80050e2 <UART_SetConfig+0x1ba>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d00a      	beq.n	80050ca <UART_SetConfig+0x1a2>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d814      	bhi.n	80050e2 <UART_SetConfig+0x1ba>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <UART_SetConfig+0x19a>
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d008      	beq.n	80050d2 <UART_SetConfig+0x1aa>
 80050c0:	e00f      	b.n	80050e2 <UART_SetConfig+0x1ba>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c8:	e0ad      	b.n	8005226 <UART_SetConfig+0x2fe>
 80050ca:	2302      	movs	r3, #2
 80050cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d0:	e0a9      	b.n	8005226 <UART_SetConfig+0x2fe>
 80050d2:	2304      	movs	r3, #4
 80050d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d8:	e0a5      	b.n	8005226 <UART_SetConfig+0x2fe>
 80050da:	2308      	movs	r3, #8
 80050dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e0:	e0a1      	b.n	8005226 <UART_SetConfig+0x2fe>
 80050e2:	2310      	movs	r3, #16
 80050e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e8:	e09d      	b.n	8005226 <UART_SetConfig+0x2fe>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005218 <UART_SetConfig+0x2f0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d125      	bne.n	8005140 <UART_SetConfig+0x218>
 80050f4:	4b45      	ldr	r3, [pc, #276]	@ (800520c <UART_SetConfig+0x2e4>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005100:	d016      	beq.n	8005130 <UART_SetConfig+0x208>
 8005102:	2bc0      	cmp	r3, #192	@ 0xc0
 8005104:	d818      	bhi.n	8005138 <UART_SetConfig+0x210>
 8005106:	2b80      	cmp	r3, #128	@ 0x80
 8005108:	d00a      	beq.n	8005120 <UART_SetConfig+0x1f8>
 800510a:	2b80      	cmp	r3, #128	@ 0x80
 800510c:	d814      	bhi.n	8005138 <UART_SetConfig+0x210>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <UART_SetConfig+0x1f0>
 8005112:	2b40      	cmp	r3, #64	@ 0x40
 8005114:	d008      	beq.n	8005128 <UART_SetConfig+0x200>
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x210>
 8005118:	2300      	movs	r3, #0
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511e:	e082      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005126:	e07e      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800512e:	e07a      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005136:	e076      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513e:	e072      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a35      	ldr	r2, [pc, #212]	@ (800521c <UART_SetConfig+0x2f4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d12a      	bne.n	80051a0 <UART_SetConfig+0x278>
 800514a:	4b30      	ldr	r3, [pc, #192]	@ (800520c <UART_SetConfig+0x2e4>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005158:	d01a      	beq.n	8005190 <UART_SetConfig+0x268>
 800515a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800515e:	d81b      	bhi.n	8005198 <UART_SetConfig+0x270>
 8005160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005164:	d00c      	beq.n	8005180 <UART_SetConfig+0x258>
 8005166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516a:	d815      	bhi.n	8005198 <UART_SetConfig+0x270>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <UART_SetConfig+0x250>
 8005170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005174:	d008      	beq.n	8005188 <UART_SetConfig+0x260>
 8005176:	e00f      	b.n	8005198 <UART_SetConfig+0x270>
 8005178:	2300      	movs	r3, #0
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517e:	e052      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005180:	2302      	movs	r3, #2
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e04e      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e04a      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e046      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519e:	e042      	b.n	8005226 <UART_SetConfig+0x2fe>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a17      	ldr	r2, [pc, #92]	@ (8005204 <UART_SetConfig+0x2dc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d13a      	bne.n	8005220 <UART_SetConfig+0x2f8>
 80051aa:	4b18      	ldr	r3, [pc, #96]	@ (800520c <UART_SetConfig+0x2e4>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051b8:	d01a      	beq.n	80051f0 <UART_SetConfig+0x2c8>
 80051ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051be:	d81b      	bhi.n	80051f8 <UART_SetConfig+0x2d0>
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c4:	d00c      	beq.n	80051e0 <UART_SetConfig+0x2b8>
 80051c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ca:	d815      	bhi.n	80051f8 <UART_SetConfig+0x2d0>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <UART_SetConfig+0x2b0>
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d4:	d008      	beq.n	80051e8 <UART_SetConfig+0x2c0>
 80051d6:	e00f      	b.n	80051f8 <UART_SetConfig+0x2d0>
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051de:	e022      	b.n	8005226 <UART_SetConfig+0x2fe>
 80051e0:	2302      	movs	r3, #2
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e6:	e01e      	b.n	8005226 <UART_SetConfig+0x2fe>
 80051e8:	2304      	movs	r3, #4
 80051ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ee:	e01a      	b.n	8005226 <UART_SetConfig+0x2fe>
 80051f0:	2308      	movs	r3, #8
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051f6:	e016      	b.n	8005226 <UART_SetConfig+0x2fe>
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fe:	e012      	b.n	8005226 <UART_SetConfig+0x2fe>
 8005200:	cfff69f3 	.word	0xcfff69f3
 8005204:	40008000 	.word	0x40008000
 8005208:	40013800 	.word	0x40013800
 800520c:	40021000 	.word	0x40021000
 8005210:	40004400 	.word	0x40004400
 8005214:	40004800 	.word	0x40004800
 8005218:	40004c00 	.word	0x40004c00
 800521c:	40005000 	.word	0x40005000
 8005220:	2310      	movs	r3, #16
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4aae      	ldr	r2, [pc, #696]	@ (80054e4 <UART_SetConfig+0x5bc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	f040 8097 	bne.w	8005360 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005232:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005236:	2b08      	cmp	r3, #8
 8005238:	d823      	bhi.n	8005282 <UART_SetConfig+0x35a>
 800523a:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <UART_SetConfig+0x318>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005265 	.word	0x08005265
 8005244:	08005283 	.word	0x08005283
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005283 	.word	0x08005283
 8005250:	08005273 	.word	0x08005273
 8005254:	08005283 	.word	0x08005283
 8005258:	08005283 	.word	0x08005283
 800525c:	08005283 	.word	0x08005283
 8005260:	0800527b 	.word	0x0800527b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fd fc7c 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8005268:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800526a:	e010      	b.n	800528e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800526c:	4b9e      	ldr	r3, [pc, #632]	@ (80054e8 <UART_SetConfig+0x5c0>)
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005270:	e00d      	b.n	800528e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005272:	f7fd fc07 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8005276:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005278:	e009      	b.n	800528e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005280:	e005      	b.n	800528e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800528c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8130 	beq.w	80054f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	4a94      	ldr	r2, [pc, #592]	@ (80054ec <UART_SetConfig+0x5c4>)
 800529c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d305      	bcc.n	80052c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d903      	bls.n	80052ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052cc:	e113      	b.n	80054f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	2200      	movs	r2, #0
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	60fa      	str	r2, [r7, #12]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	4a84      	ldr	r2, [pc, #528]	@ (80054ec <UART_SetConfig+0x5c4>)
 80052dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2200      	movs	r2, #0
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052f0:	f7fa ff92 	bl	8000218 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	020b      	lsls	r3, r1, #8
 8005306:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800530a:	0202      	lsls	r2, r0, #8
 800530c:	6979      	ldr	r1, [r7, #20]
 800530e:	6849      	ldr	r1, [r1, #4]
 8005310:	0849      	lsrs	r1, r1, #1
 8005312:	2000      	movs	r0, #0
 8005314:	460c      	mov	r4, r1
 8005316:	4605      	mov	r5, r0
 8005318:	eb12 0804 	adds.w	r8, r2, r4
 800531c:	eb43 0905 	adc.w	r9, r3, r5
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	469a      	mov	sl, r3
 8005328:	4693      	mov	fp, r2
 800532a:	4652      	mov	r2, sl
 800532c:	465b      	mov	r3, fp
 800532e:	4640      	mov	r0, r8
 8005330:	4649      	mov	r1, r9
 8005332:	f7fa ff71 	bl	8000218 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4613      	mov	r3, r2
 800533c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005344:	d308      	bcc.n	8005358 <UART_SetConfig+0x430>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800534c:	d204      	bcs.n	8005358 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6a3a      	ldr	r2, [r7, #32]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	e0ce      	b.n	80054f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800535e:	e0ca      	b.n	80054f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005368:	d166      	bne.n	8005438 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800536a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800536e:	2b08      	cmp	r3, #8
 8005370:	d827      	bhi.n	80053c2 <UART_SetConfig+0x49a>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x450>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fd fbe0 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a2:	e014      	b.n	80053ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fd fbf2 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 80053a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053aa:	e010      	b.n	80053ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b4e      	ldr	r3, [pc, #312]	@ (80054e8 <UART_SetConfig+0x5c0>)
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053b0:	e00d      	b.n	80053ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fd fb67 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80053b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b8:	e009      	b.n	80053ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053c0:	e005      	b.n	80053ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8090 	beq.w	80054f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	4a44      	ldr	r2, [pc, #272]	@ (80054ec <UART_SetConfig+0x5c4>)
 80053dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e8:	005a      	lsls	r2, r3, #1
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	441a      	add	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d916      	bls.n	8005430 <UART_SetConfig+0x508>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005408:	d212      	bcs.n	8005430 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f023 030f 	bic.w	r3, r3, #15
 8005412:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	b29a      	uxth	r2, r3
 8005420:	8bfb      	ldrh	r3, [r7, #30]
 8005422:	4313      	orrs	r3, r2
 8005424:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	8bfa      	ldrh	r2, [r7, #30]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e062      	b.n	80054f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005436:	e05e      	b.n	80054f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005438:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800543c:	2b08      	cmp	r3, #8
 800543e:	d828      	bhi.n	8005492 <UART_SetConfig+0x56a>
 8005440:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <UART_SetConfig+0x520>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	08005493 	.word	0x08005493
 8005458:	08005483 	.word	0x08005483
 800545c:	08005493 	.word	0x08005493
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	0800548b 	.word	0x0800548b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fd fb78 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005472:	e014      	b.n	800549e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fd fb8a 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8005478:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800547a:	e010      	b.n	800549e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547c:	4b1a      	ldr	r3, [pc, #104]	@ (80054e8 <UART_SetConfig+0x5c0>)
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005480:	e00d      	b.n	800549e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fd faff 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8005486:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005488:	e009      	b.n	800549e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005490:	e005      	b.n	800549e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800549c:	bf00      	nop
    }

    if (pclk != 0U)
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d028      	beq.n	80054f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	4a10      	ldr	r2, [pc, #64]	@ (80054ec <UART_SetConfig+0x5c4>)
 80054aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	441a      	add	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b0f      	cmp	r3, #15
 80054cc:	d910      	bls.n	80054f0 <UART_SetConfig+0x5c8>
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d4:	d20c      	bcs.n	80054f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e009      	b.n	80054f6 <UART_SetConfig+0x5ce>
 80054e2:	bf00      	nop
 80054e4:	40008000 	.word	0x40008000
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	0800615c 	.word	0x0800615c
      }
      else
      {
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2201      	movs	r2, #1
 8005502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2200      	movs	r2, #0
 8005510:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005512:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005516:	4618      	mov	r0, r3
 8005518:	3730      	adds	r7, #48	@ 0x30
 800551a:	46bd      	mov	sp, r7
 800551c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01a      	beq.n	8005636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800561e:	d10a      	bne.n	8005636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b098      	sub	sp, #96	@ 0x60
 8005668:	af02      	add	r7, sp, #8
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005674:	f7fb fef8 	bl	8001468 <HAL_GetTick>
 8005678:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b08      	cmp	r3, #8
 8005686:	d12f      	bne.n	80056e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005690:	2200      	movs	r2, #0
 8005692:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f88e 	bl	80057b8 <UART_WaitOnFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d022      	beq.n	80056e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e6      	bne.n	80056a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e063      	b.n	80057b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d149      	bne.n	800578a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fe:	2200      	movs	r2, #0
 8005700:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f857 	bl	80057b8 <UART_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d03c      	beq.n	800578a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	623b      	str	r3, [r7, #32]
   return(result);
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005730:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	60fb      	str	r3, [r7, #12]
   return(result);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005762:	61fa      	str	r2, [r7, #28]
 8005764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	69b9      	ldr	r1, [r7, #24]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	617b      	str	r3, [r7, #20]
   return(result);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e5      	bne.n	8005742 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e012      	b.n	80057b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3758      	adds	r7, #88	@ 0x58
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c8:	e04f      	b.n	800586a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d04b      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7fb fe49 	bl	8001468 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e04e      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d037      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0xb2>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b80      	cmp	r3, #128	@ 0x80
 80057fe:	d034      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b40      	cmp	r3, #64	@ 0x40
 8005804:	d031      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b08      	cmp	r3, #8
 8005812:	d110      	bne.n	8005836 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2208      	movs	r2, #8
 800581a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f920 	bl	8005a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2208      	movs	r2, #8
 8005826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e029      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005844:	d111      	bne.n	800586a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800584e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f906 	bl	8005a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e00f      	b.n	800588a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4013      	ands	r3, r2
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	429a      	cmp	r2, r3
 8005886:	d0a0      	beq.n	80057ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b096      	sub	sp, #88	@ 0x58
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2222      	movs	r2, #34	@ 0x22
 80058bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02d      	beq.n	8005926 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d0:	4a40      	ldr	r2, [pc, #256]	@ (80059d4 <UART_Start_Receive_DMA+0x140>)
 80058d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058da:	4a3f      	ldr	r2, [pc, #252]	@ (80059d8 <UART_Start_Receive_DMA+0x144>)
 80058dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e4:	4a3d      	ldr	r2, [pc, #244]	@ (80059dc <UART_Start_Receive_DMA+0x148>)
 80058e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ee:	2200      	movs	r2, #0
 80058f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3324      	adds	r3, #36	@ 0x24
 80058fe:	4619      	mov	r1, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005904:	461a      	mov	r2, r3
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	f7fb ff72 	bl	80017f0 <HAL_DMA_Start_IT>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2210      	movs	r2, #16
 8005916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e051      	b.n	80059ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d018      	beq.n	8005960 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005942:	657b      	str	r3, [r7, #84]	@ 0x54
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800595a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	653b      	str	r3, [r7, #80]	@ 0x50
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005980:	637a      	str	r2, [r7, #52]	@ 0x34
 8005982:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	613b      	str	r3, [r7, #16]
   return(result);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059b4:	623a      	str	r2, [r7, #32]
 80059b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3758      	adds	r7, #88	@ 0x58
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08005bed 	.word	0x08005bed
 80059d8:	08005d21 	.word	0x08005d21
 80059dc:	08005d67 	.word	0x08005d67

080059e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b08f      	sub	sp, #60	@ 0x3c
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e6      	bne.n	80059e8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3a:	61ba      	str	r2, [r7, #24]
 8005a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	613b      	str	r3, [r7, #16]
   return(result);
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005a56:	bf00      	nop
 8005a58:	373c      	adds	r7, #60	@ 0x3c
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b095      	sub	sp, #84	@ 0x54
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3308      	adds	r3, #8
 8005abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e3      	bne.n	8005a9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d118      	bne.n	8005b0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f023 0310 	bic.w	r3, r3, #16
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	613b      	str	r3, [r7, #16]
   return(result);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e6      	bne.n	8005adc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b22:	bf00      	nop
 8005b24:	3754      	adds	r7, #84	@ 0x54
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b090      	sub	sp, #64	@ 0x40
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d137      	bne.n	8005bba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	623b      	str	r3, [r7, #32]
   return(result);
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b72:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e6      	bne.n	8005b86 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bb8:	e004      	b.n	8005bc4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005bc2:	4798      	blx	r3
}
 8005bc4:	bf00      	nop
 8005bc6:	3740      	adds	r7, #64	@ 0x40
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b09c      	sub	sp, #112	@ 0x70
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d171      	bne.n	8005cec <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e6      	bne.n	8005c10 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3308      	adds	r3, #8
 8005c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c62:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	623b      	str	r3, [r7, #32]
   return(result);
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3308      	adds	r3, #8
 8005c94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c96:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d118      	bne.n	8005cec <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	69b9      	ldr	r1, [r7, #24]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e6      	bne.n	8005cba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cee:	2200      	movs	r2, #0
 8005cf0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d109      	bne.n	8005d0e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d02:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005d06:	4611      	mov	r1, r2
 8005d08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d0a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d0c:	e004      	b.n	8005d18 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8005d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d16:	4798      	blx	r3
}
 8005d18:	bf00      	nop
 8005d1a:	3770      	adds	r7, #112	@ 0x70
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d10b      	bne.n	8005d54 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005d48:	0852      	lsrs	r2, r2, #1
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d52:	e004      	b.n	8005d5e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	4798      	blx	r3
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	2b80      	cmp	r3, #128	@ 0x80
 8005d90:	d109      	bne.n	8005da6 <UART_DMAError+0x40>
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b21      	cmp	r3, #33	@ 0x21
 8005d96:	d106      	bne.n	8005da6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005da0:	6978      	ldr	r0, [r7, #20]
 8005da2:	f7ff fe1d 	bl	80059e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d109      	bne.n	8005dc8 <UART_DMAError+0x62>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b22      	cmp	r3, #34	@ 0x22
 8005db8:	d106      	bne.n	8005dc8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f7ff fe4d 	bl	8005a62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dce:	f043 0210 	orr.w	r2, r3, #16
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b088      	sub	sp, #32
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e6      	bne.n	8005e22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6c:	bf00      	nop
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e027      	b.n	8005f16 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	@ 0x24
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e02d      	b.n	8005f96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2224      	movs	r2, #36	@ 0x24
 8005f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f850 	bl	800601c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e02d      	b.n	8006012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2224      	movs	r2, #36	@ 0x24
 8005fc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f812 	bl	800601c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800603c:	e031      	b.n	80060a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800603e:	2308      	movs	r3, #8
 8006040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006042:	2308      	movs	r3, #8
 8006044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	0e5b      	lsrs	r3, r3, #25
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0f5b      	lsrs	r3, r3, #29
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	7b3a      	ldrb	r2, [r7, #12]
 800606a:	4911      	ldr	r1, [pc, #68]	@ (80060b0 <UARTEx_SetNbDataToProcess+0x94>)
 800606c:	5c8a      	ldrb	r2, [r1, r2]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006072:	7b3a      	ldrb	r2, [r7, #12]
 8006074:	490f      	ldr	r1, [pc, #60]	@ (80060b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006078:	fb93 f3f2 	sdiv	r3, r3, r2
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	7b7a      	ldrb	r2, [r7, #13]
 8006088:	4909      	ldr	r1, [pc, #36]	@ (80060b0 <UARTEx_SetNbDataToProcess+0x94>)
 800608a:	5c8a      	ldrb	r2, [r1, r2]
 800608c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006090:	7b7a      	ldrb	r2, [r7, #13]
 8006092:	4908      	ldr	r1, [pc, #32]	@ (80060b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006096:	fb93 f3f2 	sdiv	r3, r3, r2
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	08006174 	.word	0x08006174
 80060b4:	0800617c 	.word	0x0800617c

080060b8 <memset>:
 80060b8:	4402      	add	r2, r0
 80060ba:	4603      	mov	r3, r0
 80060bc:	4293      	cmp	r3, r2
 80060be:	d100      	bne.n	80060c2 <memset+0xa>
 80060c0:	4770      	bx	lr
 80060c2:	f803 1b01 	strb.w	r1, [r3], #1
 80060c6:	e7f9      	b.n	80060bc <memset+0x4>

080060c8 <__libc_init_array>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006100 <__libc_init_array+0x38>)
 80060cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006104 <__libc_init_array+0x3c>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	2600      	movs	r6, #0
 80060d4:	42a6      	cmp	r6, r4
 80060d6:	d109      	bne.n	80060ec <__libc_init_array+0x24>
 80060d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006108 <__libc_init_array+0x40>)
 80060da:	4c0c      	ldr	r4, [pc, #48]	@ (800610c <__libc_init_array+0x44>)
 80060dc:	f000 f826 	bl	800612c <_init>
 80060e0:	1b64      	subs	r4, r4, r5
 80060e2:	10a4      	asrs	r4, r4, #2
 80060e4:	2600      	movs	r6, #0
 80060e6:	42a6      	cmp	r6, r4
 80060e8:	d105      	bne.n	80060f6 <__libc_init_array+0x2e>
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f0:	4798      	blx	r3
 80060f2:	3601      	adds	r6, #1
 80060f4:	e7ee      	b.n	80060d4 <__libc_init_array+0xc>
 80060f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fa:	4798      	blx	r3
 80060fc:	3601      	adds	r6, #1
 80060fe:	e7f2      	b.n	80060e6 <__libc_init_array+0x1e>
 8006100:	0800618c 	.word	0x0800618c
 8006104:	0800618c 	.word	0x0800618c
 8006108:	0800618c 	.word	0x0800618c
 800610c:	08006190 	.word	0x08006190

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006126:	4291      	cmp	r1, r2
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <_init>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr

08006138 <_fini>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr
